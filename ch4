#使用numpy的ndarray建立Series物件
import pandas as pd
import numpy as np

s1 = pd.Series(np.arange(0,7,2))
print(f"{s1}")

#建立函索引的Series物件
myindex = [3,5,7]
price = [100,200,300]
s2 = pd.Series(price,index=myindex)
print(f"{s2}")

s = pd.Series([30,50,60],index=['apple','banana','orange'])
print(f"{s}")
print(f"{s.values}")    #印出Series物件索引
print(f"{s.index}")     #印出Series值

---------------------------------------------------------------------
# 使用Series建立DataFrame
import pandas as pd
years = range(2020,2023)
a = pd.Series([11,12,13],index=years)
b = pd.Series([14,15,16],index=years)
c = pd.Series([17,18,19],index=years)
total = pd.concat([a,b,c],axis=1)   #axis = 1是水平的，預設的axis=0是直的
header = ['a','b','c']              #欄位名稱宣告
total.columns = header              #設定欄位名稱進去DataFrame中
print(type(total))
print(total)

----------------------------------------------------------------------
import pandas as pd
#使用元素是字典的串列建立DataFrame
data = [{'apple':50,'Orange':30,'Grape':80},{'apple':40,'Grape':70}]
fruits = pd.DataFrame(data)
print(fruits)

#使用字典建立DataFrame
cities = {'country':['China','Japan','Singapore'],
          'town':['Beijing','Tokyo','Singapore'],
          'population':[2000,1600,600]}
rowindex = ['first','second','third']           #定義列欄位名稱
citydf = pd.DataFrame(cities,index=rowindex)
print(citydf)

---------------------------------------------------------------------
#使用字典建立DataFrame
cities = {'country':['China','Japan','Singapore'],
          'town':['Beijing','Tokyo','Singapore'],
          'population':[2000,1600,600]}
citydf = pd.DataFrame(cities,columns=['town','population'],index=cities['country']) 
#將字典內某個元素當作index
print(citydf)

print(citydf.at['China','town'])      #取得指定的列、column  (只能單一元素or單一陣列)
print(citydf.iat[2,1])              #iat，i(index)使用編號取得資料，印出第二列第一行 (單一)
print(citydf.loc['Japan'])          #loc取得row是Japan的資料
print(citydf.loc[['Japan','China']])
print(citydf.loc['China':'Japan','town':'population'])    #印出兩個  (列:列,欄位:欄位) 資訊
print(citydf.iloc[0])      #印出第一列資料

# at 單數
#loc 單數雙數都可以

--------------------------------------------------------------------------
import pandas as pd
import numpy as np
df = pd.DataFrame([[1,2,3],[4,np.nan],[7,8,np.nan]])
print(df.isna())   #印出是否為NA值
print(df.notna())  #是否不是NA值
print(df.fillna(3))  #將NA值用3去填補
print(df.dropna(1)) #刪除NA值的行
print(df.dropna(0)) #刪除NA值的列
print(df.cumsum())

cities = {'Population':[2000,3000,4000],
          'country':['US','Taiwan','Japan'],
          'town':['A','B','C']}
f = pd.DataFrame(cities,columns=['Population','country'],index=cities['town'])
print(f['Population'].cumsum())        #印出指定軸累積的總合
print(f['Population'].cummax())        #印出指定軸累積的最大值
print(f['Population'].cummin())        #印出指定軸累積的最小值

--------------------------------------------------------------------------
import pandas as pd
course = ['Chinese','English','Math','Natural','Society']
chinese = [14,12,13,10,13]
math = [10,11,13,12,14]
english = [10,11,11,14,14]
natural = [15.,13,14,15,15]
society = [10,15,15,15,15]

df = pd.DataFrame([chinese,math,english,natural,society],columns=course,index = range(1,6))
total = [df.iloc[i].sum() for i in range(0,5)]
df['Total'] = total               #新增一個欄位
print(df.drop(index=[3]))                          #刪除索引值為3的所有列資料
df = df.sort_values(by='Total',ascending=False)  #排序，上升=False，所以是由大到小排序
rank = range(1,6)
df['Ranking'] = rank
print(df)
#當總分一樣時處理，讓排名也相同
for i in range(1,5):
    if df.iat[i,5] == df.iat[i-1,5]:
        df.iat[i,6] = df.iat[i-1,6]

df = df.sort_index()   #讓index隨便排序
print(df)

ave = df.mean()
df.loc['Average'] = ave           #新增一個新的row，要用loc，名稱會變成索引值
print(df)
print(df.drop(index=["Average"])) #刪除索引值

df.to_csv('ok.csv')                                #將DataFrame寫成csv檔
df.to_csv('okk.csv',header=False,index=False)      #將DataFrame寫成csv檔，但無索引值、無欄位名稱


head = ['a','b','c','d','e']
x = pd.read_csv('ok.csv',index_col=0)     #讀入csv檔，需用index_col來指定第幾欄去作為index值
y = pd.read_csv('okk.csv',names=head)     #讀入csv檔，並用names來設定header欄位的名稱
print(x)
print(y)

-----------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt
import pandas as pd

#使用Series繪製折線圖
population = [860, 1100, 1450, 1800, 2020, 2200, 2260]
tw = pd.Series(population, index=range(1950, 2011, 10))
tw.plot(title='Population in Taiwan')
plt.xlabel("Year")
plt.ylabel("Population")
plt.show()

#使用DataFrame繪製折線圖
cities = {'population':[1000,850,900,599,343,667],
          'town':['New York','Chicago','Bangkok','Tokyo','Singapore','HongKong']}
tww = pd.DataFrame(cities,columns=['population'],index=cities['town'])
tww.plot(title='Population in the world')
plt.xlabel('City')
plt.ylabel('Population')
plt.show()

#直條圖
tw.plot(title='Population in the world',kind='bar')
plt.show()

#一個圖表用兩筆資料去比較呈現
cities = {'population':[1000, 850, 800, 1500, 600, 800],
          'area':[400, 500, 850, 300, 200, 320],
          'town':['New York','Chicago','Bangkok','Tokyo',
                   'Singapore','HongKong']}
tw = pd.DataFrame(cities, columns=['population','area'],index=cities['town'])
          
tw.plot(title='Population in the World')
plt.xlabel('City')
plt.show()

#多個數值軸的設計
cities = {'population':[10000000,8500000,8000000,15000000,6000000,8000000],
          'area':[400, 500, 850, 300, 200, 320],
          'town':['New York','Chicago','Bangkok','Tokyo',
                   'Singapore','HongKong']}
tw = pd.DataFrame(cities,columns=['population','area'],index=cities['town'])
fig,ax = plt.subplots()        #fig是整體圖表物件，ax是第一個軸
fig.suptitle('City Statistics')   #設定大標題
ax.set_xlabel('City')            #X軸上標題
ax.set_ylabel('Population')      #y軸上標題
ax.ticklabel_format(style='plain')     #軸上數值不用科學記號表示

ax2 = ax.twinx()                #建立第二個軸物件ax2
ax2.set_ylabel('Area')          #第二物件軸名稱
tw['population'].plot(ax=ax,rot=90)   #繪製人口數線
tw['area'].plot(ax=ax2,style='g-')    #繪製面積圖
ax.legend(loc=1)      #圖示位置標示在右上
ax2.legend(loc=2)     #圖示位置標示左上 
plt.show()


#使用Series物件設計 圓餅圖
fruits = ['Apples', 'Bananas', 'Grapes', 'Pears', 'Oranges']
s = pd.Series([2300,5000,1200,2500,2900],index=fruits,name='Fruits Shop')
explode = [0.4,0,0,0.2,0]     #設定是否從圓餅圖分離的串列，數值越大分離越遠,0為不分離
s.plot.pie(explode = explode,autopct = '%1.2f%%')   #autopct表示項目的百分比
plt.show()

--------------------------------------------------------------------------------------------

from datetime import datetime,timedelta
import pandas as pd
import matplotlib.pyplot as plt

#用datatime模組建立含時間戳的Series物件
ndays = 5
start = datetime(2023,2,22)
dates = [start + timedelta(days=x) for x in range(0,ndays)]
data = [34,44,65,53,59]
ts = pd.Series(data,index=dates)
print(type(ts))
print(ts)

print(ts.index)    #時間序列的索引

#若時間的日期相同可以相加，不同日期相加則會產生NaN

#繪製時間序列折線圖
dates = pd.date_range('1/11/2023','1/15/2023')
data = [20,13,34,43,34]
ts = pd.Series(data,index=dates)
ts.plot(title='Data in Time Series')
plt.xlabel('Date')
plt.ylabel('Data')
plt.show()

------------------------------------------------------------------------
import requests

url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'

try:
    htmlfile = requests.get(url)         #將檔案下載下來
    print('下載成功')
except Exception as err:
    print('下載失敗')

fn = 'iris.csv'
with open(fn,'wb') as fileobj:                 #寫成csv檔 
    for i in htmlfile.iter_content(10240):       #一次寫入10240位元組的資料
        size = fileobj.write(i)
        
--------------------------------------------------------------------------------
#匯入網頁表格資料
import pandas as pd
url = r'http://www.stockq.org/market/currency.php'
currencys = pd.read_html(url)

item = 0
for i in currencys:             #利用迴圈找出我們所要的資料位置
    print('元素: ',item)
    print(i)
    print()
    item += 1

#可知我們要的數據在元素索引7位置

currency = currencys[7]
currency = currency.drop(currency.index[[0,1]])   #將前兩列刪除
currency.columns = ['貨幣','匯率','漲跌','比例','台北']    #建立欄位名稱
currency.index = range(len(currency.index))               #建立索引值
print(currency)

